D G "__PCB__" 0 17 ""5.005d""
D G "__DEVICE__" 0 17 "510"
D G "__DATE__" 0 17 ""10-jul-13""
D G "__TIME__" 0 17 ""12:50:25"" "Standard Header file for the PIC12F510 device ////////////////"
c L "set_tris_b" 1 5 12 "FUNCTION"
v L "value" 1 27 "int8" `35 
f B "set_tris_b" 1 27 "void(int8 value)" `34 
f B "get_tris_b" 1 28 "int8()" `36 
v L "value" 1 29 "int8" `38 
f B "output_b" 1 29 "void(int8 value)" `37 
f B "input_b" 1 30 "int8()" `39 
f B "input_change_b" 1 31 "int8()" `40 
v L "pin" 1 32 "int16" `42 
f B "input" 1 32 "int8(int16 pin)" `41 
v L "pin" 1 33 "int16" `44 
f B "input_state" 1 33 "int8(int16 pin)" `43 
v L "pin" 1 34 "int16" `46 
f B "output_low" 1 34 "void(int16 pin)" `45 
v L "pin" 1 35 "int16" `48 
f B "output_high" 1 35 "void(int16 pin)" `47 
v L "pin" 1 36 "int16" `50 
f B "output_toggle" 1 36 "void(int16 pin)" `49 
v L "pin" 1 37 "int16" `52 
v L "level" 1 37 "int8" `53 
f B "output_bit" 1 37 "void(int16 pin,int8 level)" `51 
v L "pin" 1 38 "int16" `55 
f B "output_float" 1 38 "void(int16 pin)" `54 
v L "pin" 1 39 "int16" `57 
f B "output_drive" 1 39 "void(int16 pin)" `56  "Constants used to identify pins in the above are:"
d G "PIN_B0" 1 43 "48"
d G "PIN_B1" 1 44 "49"
d G "PIN_B2" 1 45 "50"
d G "PIN_B3" 1 46 "51"
d G "PIN_B4" 1 47 "52"
d G "PIN_B5" 1 48 "53"
d G "FALSE" 1 51 "0"
d G "TRUE" 1 52 "1"
d G "BYTE" 1 54 "int8"
d G "BOOLEAN" 1 55 "int1"
d G "getc" 1 57 "getch"
d G "fgetc" 1 58 "getch"
d G "getchar" 1 59 "getch"
d G "putc" 1 60 "putchar"
d G "fputc" 1 61 "putchar"
d G "fgets" 1 62 "gets"
d G "fputs" 1 63 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 68 "int8()" `58 
f B "reset_cpu" 1 69 "void()" `59 
f B "sleep" 1 70 "void()" `60  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 72 "3"
d G "WDT_TIMEOUT" 1 73 "11"
d G "MCLR_FROM_SLEEP" 1 74 "19"
d G "MCLR_FROM_RUN" 1 75 "27"
d G "NORMAL_POWER_UP" 1 76 "25"
d G "BROWNOUT_RESTART" 1 77 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 84 "int8" `62 
f B "setup_timer_0" 1 84 "void(int8 mode)" `61 
v L "value" 1 85 "int8" `64 
f B "set_timer0" 1 85 "void(int8 value)" `63 
f B "get_timer0" 1 86 "int8()" `65 
v L "mode" 1 87 "int8" `67 
v L "prescaler" 1 87 "int8" `68 
f B "setup_counters" 1 87 "void(int8 mode,int8 prescaler)" `66 
v L "value" 1 88 "int8" `70 
f B "set_rtcc" 1 88 "void(int8 value)" `69 
f B "get_rtcc" 1 89 "int8()" `71  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 91 "0"
d G "T0_EXT_L_TO_H" 1 92 "32"
d G "T0_EXT_H_TO_L" 1 93 "48"
d G "T0_DIV_1" 1 95 "8"
d G "T0_DIV_2" 1 96 "0"
d G "T0_DIV_4" 1 97 "1"
d G "T0_DIV_8" 1 98 "2"
d G "T0_DIV_16" 1 99 "3"
d G "T0_DIV_32" 1 100 "4"
d G "T0_DIV_64" 1 101 "5"
d G "T0_DIV_128" 1 102 "6"
d G "T0_DIV_256" 1 103 "7"
d G "T0_8_BIT" 1 106 "0"
d G "RTCC_INTERNAL" 1 108 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 109 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 110 "48"
d G "RTCC_DIV_1" 1 111 "8"
d G "RTCC_DIV_2" 1 112 "0"
d G "RTCC_DIV_4" 1 113 "1"
d G "RTCC_DIV_8" 1 114 "2"
d G "RTCC_DIV_16" 1 115 "3"
d G "RTCC_DIV_32" 1 116 "4"
d G "RTCC_DIV_64" 1 117 "5"
d G "RTCC_DIV_128" 1 118 "6"
d G "RTCC_DIV_256" 1 119 "7"
d G "RTCC_8_BIT" 1 120 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 131 "int16" `73 
f B "setup_wdt" 1 131 "void(int16 mode)" `72 
f B "restart_wdt" 1 132 "void()" `74  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 135 "8"
d G "WDT_36MS" 1 136 "9"
d G "WDT_72MS" 1 137 "10"
d G "WDT_144MS" 1 138 "11"
d G "WDT_288MS" 1 139 "12"
d G "WDT_576MS" 1 140 "13"
d G "WDT_1152MS" 1 141 "14"
d G "WDT_2304MS" 1 142 "15"
d G "DISABLE_PULLUPS" 1 145 "0x40" "for 508 and 509 only"
d G "DISABLE_WAKEUP_ON_CHANGE" 1 146 "0x80" "for 508 and 509 only"
d G "PIN_CHANGE_FROM_SLEEP" 1 147 "0" "DEFAULT, for 508 and 509 only"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 152 "int32" `76 
f B "setup_comparator" 1 152 "void(int32 mode)" `75  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 154 "0x00FF07"
d G "NC_NC" 1 155 "0x00FF07"
d G "A1_A0" 1 156 "0x04FF5E"
d G "VR_A0" 1 157 "0x04ff5A"
d G "VR_A1" 1 158 "0x04ff58"
d G "A1_A0_OUT_ON_A2" 1 159 "0x00FB1E"
d G "VR_A0_OUT_ON_A2" 1 160 "0x00FB1A"
d G "VR_A1_OUT_ON_A2" 1 161 "0x00FB18"
d G "COMP_DISABLE_WAKEUP" 1 164 "1"
d G "COMP_INVERT" 1 165 "0x20"
c L "setup_comparator" 1 5 4 "FUNCTION"
v L "mode" 1 174 "int8" `79 
f G "setup_adc" 1 174 "void(int8 mode)" `78 
f G "read_adc" 1 175 "int8()" `80 
v L "mode" 1 176 "int8" `82 
f G "read_adc" 1 176 "int8(int8 mode)" `81 
f G "read_adc" 1 177 "int16()" `83 
v L "mode" 1 178 "int8" `85 
f G "read_adc" 1 178 "int16(int8 mode)" `84 
f G "adc_done" 1 179 "int8()" `86  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 181 "0" "ADC Off"
d G "ADC_CLOCK_DIV_32" 1 182 "0x00"
d G "ADC_CLOCK_DIV_16" 1 183 "0x10"
d G "ADC_CLOCK_DIV_8" 1 184 "0x20"
d G "ADC_CLOCK_INTERNAL" 1 185 "0x30" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "pins" 1 188 "int8" `88 
f B "setup_adc_ports" 1 188 "void(int8 pins)" `87 
v L "channel" 1 189 "int8" `90 
f B "set_adc_channel" 1 189 "void(int8 channel)" `89  "Constants used in SETUP_ADC_PORTS() are:"
d G "AN0_AN1_AN2" 1 191 "0xc0" "A0 A1 A2"
d G "AN0_AN2" 1 192 "0x80" "A0 A2"
d G "AN2" 1 193 "0x40" "A2"
d G "NO_ANALOGS" 1 194 "0" "None"
d G "ADC_START_AND_READ" 1 197 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 198 "1"
d G "ADC_READ_ONLY" 1 199 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 205 "sint8" `92 
f B "abs" 1 205 "sint8(sint8 x)" `91 
v L "x" 1 206 "sint16" `94 
f G "abs" 1 206 "sint16(sint16 x)" `93 
v L "x" 1 207 "sint32" `96 
f G "abs" 1 207 "sint32(sint32 x)" `95 
v L "x" 1 208 "float" `98 
f G "abs" 1 208 "float(float x)" `97 
v L "??65535" 1 209 "int8" `100 
v L "??65535" 1 209 "int8" `101 
f B "_mul" 1 209 "int16(int8 ,int8 )" `99 
v L "??65535" 1 210 "sint8" `100 
v L "??65535" 1 210 "sint8" `104 
f G "_mul" 1 210 "sint16(sint8 ,sint8 )" `102 
v L "??65535" 1 211 "int16" `100 
v L "??65535" 1 211 "int16" `107 
f G "_mul" 1 211 "int32(int16 ,int16 )" `105 
v L "??65535" 1 212 "sint16" `100 
v L "??65535" 1 212 "sint16" `110 
f G "_mul" 1 212 "sint32(sint16 ,sint16 )" `108  "Memory Manipulation Prototypes:"
v L "bank" 1 215 "int8" `112 
v L "offset" 1 215 "int8" `113 
f B "read_bank" 1 215 "int8(int8 bank,int8 offset)" `111 
v L "bank" 1 216 "int8" `115 
v L "offset" 1 216 "int8" `116 
v L "value" 1 216 "int8" `117 
f B "write_bank" 1 216 "void(int8 bank,int8 offset,int8 value)" `114 
v L "dest" 1 217 "*int8" `119 
v L "src" 1 217 "*int8" `120 
f B "strcpy" 1 217 "void(*int8 dest,*int8 src)" `118 
v L "dest" 1 218 "*int8" `122 
v L "src" 1 218 "*int8" `123 
f B "strcopy" 1 218 "void(*int8 dest,*int8 src)" `121 
v L "destination" 1 219 "*int8" `125 
v L "value" 1 219 "int8" `126 
v L "num" 1 219 "int16" `127 
f B "memset" 1 219 "void(*int8 destination,int8 value,int16 num)" `124 
v L "destination" 1 220 "*int8" `129 
v L "source" 1 220 "*int8" `130 
v L "num" 1 220 "int16" `131 
f B "memcpy" 1 220 "void(*int8 destination,*int8 source,int16 num)" `128  "String Prototypes:"
v L "cvalue" 1 223 "int8" `133 
f B "toupper" 1 223 "int8(int8 cvalue)" `132 
v L "cvalue" 1 224 "int8" `135 
f B "tolower" 1 224 "int8(int8 cvalue)" `134 
v L "string" 1 225 "*int8" `137 
v L "cstring" 1 225 "*int8" `138 
f B "sprintf" 1 225 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `136  "Data Manipulators Prototypes:"
v L "address" 1 228 "*int8" `141 
v L "bytes" 1 228 "int8" `142 
v L "value" 1 228 "int8" `143 
f B "shift_left" 1 228 "int8(*int8 address,int8 bytes,int8 value)" `140 
v L "address" 1 229 "*int8" `145 
v L "bytes" 1 229 "int8" `146 
v L "value" 1 229 "int8" `147 
f B "shift_right" 1 229 "int8(*int8 address,int8 bytes,int8 value)" `144 
v L "address" 1 230 "*int8" `149 
v L "bytes" 1 230 "int8" `150 
f B "rotate_left" 1 230 "void(*int8 address,int8 bytes)" `148 
v L "address" 1 231 "*int8" `152 
v L "bytes" 1 231 "int8" `153 
f B "rotate_right" 1 231 "void(*int8 address,int8 bytes)" `151 
v L "value" 1 232 "int8" `155 
f B "swap" 1 232 "void(int8 value)" `154 
v L "var" 1 233 "int16" `157 
v L "offset" 1 233 "int8" `158 
f B "make8" 1 233 "int8(int16 var,int8 offset)" `156 
v L "var" 1 234 "int32" `157 
v L "offset" 1 234 "int8" `161 
f G "make8" 1 234 "int8(int32 var,int8 offset)" `159 
v L "varhigh" 1 235 "int8" `163 
v L "varlow" 1 235 "int8" `164 
f B "make16" 1 235 "int16(int8 varhigh,int8 varlow)" `162 
v L "var1" 1 236 "int16" `166 
f B "make32" 1 236 "int32(int16 var1)" `165 
v L "var1" 1 237 "int16" `168 
v L "var2" 1 237 "int16" `169 
f G "make32" 1 237 "int32(int16 var1,int16 var2)" `167 
v L "var1" 1 238 "int16" `168 
v L "var2" 1 238 "int8" `172 
f G "make32" 1 238 "int32(int16 var1,int8 var2)" `170 
v L "var1" 1 239 "int16" `174 
v L "var2" 1 239 "int8" `175 
v L "var3" 1 239 "int8" `176 
f G "make32" 1 239 "int32(int16 var1,int8 var2,int8 var3)" `173 
v L "var1" 1 240 "int8" `178 
f G "make32" 1 240 "int32(int8 var1)" `177 
v L "var1" 1 241 "int8" `168 
v L "var2" 1 241 "int8" `181 
f G "make32" 1 241 "int32(int8 var1,int8 var2)" `179 
v L "var1" 1 242 "int8" `174 
v L "var2" 1 242 "int8" `175 
v L "var3" 1 242 "int8" `185 
f G "make32" 1 242 "int32(int8 var1,int8 var2,int8 var3)" `182 
v L "var1" 1 243 "int8" `187 
v L "var2" 1 243 "int8" `188 
v L "var3" 1 243 "int8" `189 
v L "var4" 1 243 "int8" `190 
f G "make32" 1 243 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `186 
v L "var1" 1 244 "int8" `168 
v L "var2" 1 244 "int16" `193 
f G "make32" 1 244 "int32(int8 var1,int16 var2)" `191 
v L "var1" 1 245 "int8" `174 
v L "var2" 1 245 "int16" `175 
v L "var3" 1 245 "int8" `197 
f G "make32" 1 245 "int32(int8 var1,int16 var2,int8 var3)" `194 
v L "var1" 1 246 "int8" `174 
v L "var2" 1 246 "int8" `175 
v L "var3" 1 246 "int16" `201 
f G "make32" 1 246 "int32(int8 var1,int8 var2,int16 var3)" `198 
v L "var" 1 247 "int8" `203 
v L "bit" 1 247 "int8" `204 
f B "bit_set" 1 247 "void(int8 var,int8 bit)" `202 
v L "var" 1 248 "int16" `203 
v L "bit" 1 248 "int8" `207 
f G "bit_set" 1 248 "void(int16 var,int8 bit)" `205 
v L "var" 1 249 "int32" `203 
v L "bit" 1 249 "int8" `210 
f G "bit_set" 1 249 "void(int32 var,int8 bit)" `208 
v L "var" 1 250 "int8" `212 
v L "bit" 1 250 "int8" `213 
f B "bit_clear" 1 250 "void(int8 var,int8 bit)" `211 
v L "var" 1 251 "int16" `212 
v L "bit" 1 251 "int8" `216 
f G "bit_clear" 1 251 "void(int16 var,int8 bit)" `214 
v L "var" 1 252 "int32" `212 
v L "bit" 1 252 "int8" `219 
f G "bit_clear" 1 252 "void(int32 var,int8 bit)" `217 
v L "var" 1 253 "int8" `221 
v L "bit" 1 253 "int8" `222 
f B "bit_test" 1 253 "int8(int8 var,int8 bit)" `220 
v L "var" 1 254 "int16" `221 
v L "bit" 1 254 "int8" `225 
f G "bit_test" 1 254 "int8(int16 var,int8 bit)" `223 
v L "var" 1 255 "int32" `221 
v L "bit" 1 255 "int8" `228 
f G "bit_test" 1 255 "int8(int32 var,int8 bit)" `226  "#use delay() Prototypes:"
v L "count" 1 258 "int8" `230 
f B "delay_cycles" 1 258 "void(int8 count)" `229 
v L "time" 1 259 "int16" `232 
f B "delay_ms" 1 259 "void(int16 time)" `231 
v L "time" 1 260 "int16" `234 
f B "delay_us" 1 260 "void(int16 time)" `233  "#use rs232() Prototypes:"
v L "cdata" 1 263 "int8" `236 
f B "putchar" 1 263 "void(int8 cdata)" `235 
v L "cdata" 1 264 "int8" `238 
v L "stream" 1 264 "int8" `239 
f G "putchar" 1 264 "void(int8 cdata,int8 stream)" `237 
v L "string" 1 265 "*int8" `241 
f B "puts" 1 265 "void(*int8 string)" `240 
v L "string" 1 266 "*int8" `243 
v L "stream" 1 266 "int8" `244 
f G "puts" 1 266 "void(*int8 string,int8 stream)" `242 
f B "getch" 1 267 "int8()" `245 
v L "stream" 1 268 "int8" `247 
f G "getch" 1 268 "int8(int8 stream)" `246 
v L "string" 1 269 "*int8" `249 
f B "gets" 1 269 "void(*int8 string)" `248 
v L "string" 1 270 "*int8" `251 
v L "stream" 1 270 "int8" `252 
f G "gets" 1 270 "void(*int8 string,int8 stream)" `250 
f B "kbhit" 1 271 "int8()" `253 
v L "stream" 1 272 "int8" `255 
f G "kbhit" 1 272 "int8(int8 stream)" `254 
v L "string" 1 273 "*int8" `257 
f B "printf" 1 273 "void(*int8 string,*int8 _VA_LIST)" `256 
v L "stream" 1 274 "int8" `260 
v L "string" 1 274 "*int8" `261 
f B "fprintf" 1 274 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `259 
f B "putc_send" 1 275 "void()" `263 
v L "stream" 1 276 "int8" `265 
f B "fputc_send" 1 276 "void(int8 stream)" `264 
f B "rcv_buffer_full" 1 277 "int8()" `266 
v L "stream" 1 278 "int8" `268 
f G "rcv_buffer_full" 1 278 "int8(int8 stream)" `267 
f B "rcv_buffer_bytes" 1 279 "int16()" `269 
v L "stream" 1 280 "int8" `271 
f G "rcv_buffer_bytes" 1 280 "int16(int8 stream)" `270 
f B "tx_buffer_full" 1 281 "int8()" `272 
v L "stream" 1 282 "int8" `274 
f G "tx_buffer_full" 1 282 "int8(int8 stream)" `273 
f B "tx_buffer_bytes" 1 283 "int16()" `275 
v L "stream" 1 284 "int8" `277 
f G "tx_buffer_bytes" 1 284 "int16(int8 stream)" `276  "#use i2c() Prototypes:"
f B "i2c_read" 1 287 "int8()" `278 
v L "stream" 1 288 "int8" `280 
f G "i2c_read" 1 288 "int8(int8 stream)" `279 
v L "stream" 1 289 "int8" `282 
v L "ack" 1 289 "int8" `283 
f G "i2c_read" 1 289 "int8(int8 stream,int8 ack)" `281 
v L "data" 1 290 "int8" `285 
f B "i2c_write" 1 290 "int8(int8 data)" `284 
v L "stream" 1 291 "int8" `287 
v L "data" 1 291 "int8" `288 
f G "i2c_write" 1 291 "int8(int8 stream,int8 data)" `286 
f B "i2c_start" 1 292 "void()" `289 
v L "stream" 1 293 "int8" `291 
f G "i2c_start" 1 293 "void(int8 stream)" `290 
v L "stream" 1 294 "int8" `293 
v L "restart" 1 294 "int8" `294 
f G "i2c_start" 1 294 "void(int8 stream,int8 restart)" `292 
f B "i2c_stop" 1 295 "void()" `295 
v L "stream" 1 296 "int8" `297 
f G "i2c_stop" 1 296 "void(int8 stream)" `296 
f B "i2c_isr_state" 1 297 "int8()" `298 
v L "addr" 1 298 "int8" `300 
f B "i2c_slaveaddr" 1 298 "void(int8 addr)" `299 
v L "stream" 1 299 "int8" `302 
v L "addr" 1 299 "int8" `303 
f G "i2c_slaveaddr" 1 299 "void(int8 stream,int8 addr)" `301 
f B "i2c_poll" 1 300 "int8()" `304 
v L "stream" 1 301 "int8" `306 
f G "i2c_poll" 1 301 "int8(int8 stream)" `305 
v L "baud" 1 302 "int32" `308 
f B "i2c_init" 1 302 "void(int32 baud)" `307 
v L "stream" 1 303 "int8" `310 
v L "baud" 1 303 "int32" `311 
f G "i2c_init" 1 303 "void(int8 stream,int32 baud)" `309  "#use spi() Prototypes:"
f B "spi_xfer" 1 306 "int8()" `312 
f G "spi_xfer" 1 307 "int16()" `313 
f G "spi_xfer" 1 308 "int32()" `314 
v L "data" 1 309 "int8" `316 
f G "spi_xfer" 1 309 "int8(int8 data)" `315 
v L "data" 1 310 "int16" `318 
f G "spi_xfer" 1 310 "int16(int16 data)" `317 
v L "data" 1 311 "int32" `320 
f G "spi_xfer" 1 311 "int32(int32 data)" `319 
v L "stream" 1 312 "int8" `322 
v L "data" 1 312 "int8" `323 
f G "spi_xfer" 1 312 "int8(int8 stream,int8 data)" `321 
v L "stream" 1 313 "int8" `322 
v L "data" 1 313 "int16" `326 
f G "spi_xfer" 1 313 "int16(int8 stream,int16 data)" `324 
v L "stream" 1 314 "int8" `322 
v L "data" 1 314 "int32" `329 
f G "spi_xfer" 1 314 "int32(int8 stream,int32 data)" `327 
v L "stream" 1 315 "int8" `331 
v L "data" 1 315 "int8" `332 
v L "bits" 1 315 "int8" `333 
f G "spi_xfer" 1 315 "int8(int8 stream,int8 data,int8 bits)" `330 
v L "stream" 1 316 "int8" `331 
v L "data" 1 316 "int16" `332 
v L "bits" 1 316 "int8" `337 
f G "spi_xfer" 1 316 "int16(int8 stream,int16 data,int8 bits)" `334 
v L "stream" 1 317 "int8" `331 
v L "data" 1 317 "int32" `332 
v L "bits" 1 317 "int8" `341 
f G "spi_xfer" 1 317 "int32(int8 stream,int32 data,int8 bits)" `338 
v L "baud" 1 318 "int32" `343 
f B "spi_init" 1 318 "void(int32 baud)" `342 
v L "stream" 1 319 "int8" `345 
v L "baud" 1 319 "int32" `346 
f G "spi_init" 1 319 "void(int8 stream,int32 baud)" `344 
v L "baud" 1 320 "int32" `348 
f B "spi_speed" 1 320 "void(int32 baud)" `347 
v L "stream" 1 321 "int8" `350 
v L "baud" 1 321 "int32" `351 
f G "spi_speed" 1 321 "void(int8 stream,int32 baud)" `349 
v L "stream" 1 322 "int8" `353 
v L "baud" 1 322 "int32" `354 
v L "clock" 1 322 "int32" `355 
f G "spi_speed" 1 322 "void(int8 stream,int32 baud,int32 clock)" `352 
v L "data" 1 323 "int8" `357 
f B "spi_prewrite" 1 323 "void(int8 data)" `356 
v L "data" 1 324 "int16" `359 
f G "spi_prewrite" 1 324 "void(int16 data)" `358 
v L "data" 1 325 "int32" `361 
f G "spi_prewrite" 1 325 "void(int32 data)" `360 
v L "??65535" 1 326 "int8" `363 
v L "data" 1 326 "int8" `364 
f G "spi_prewrite" 1 326 "void(int8 ,int8 data)" `362 
v L "??65535" 1 327 "int8" `363 
v L "data" 1 327 "int16" `367 
f G "spi_prewrite" 1 327 "void(int8 ,int16 data)" `365 
v L "??65535" 1 328 "int8" `363 
v L "data" 1 328 "int32" `370 
f G "spi_prewrite" 1 328 "void(int8 ,int32 data)" `368 
f B "spi_xfer_in" 1 329 "int8()" `371 
f G "spi_xfer_in" 1 330 "int16()" `372 
f G "spi_xfer_in" 1 331 "int32()" `373 
v L "bits" 1 332 "int8" `375 
f G "spi_xfer_in" 1 332 "int8(int8 bits)" `374 
v L "bits" 1 333 "int8" `377 
f G "spi_xfer_in" 1 333 "int16(int8 bits)" `376 
v L "bits" 1 334 "int8" `379 
f G "spi_xfer_in" 1 334 "int32(int8 bits)" `378 
v L "stream" 1 335 "int8" `381 
v L "bits" 1 335 "int8" `382 
f G "spi_xfer_in" 1 335 "int8(int8 stream,int8 bits)" `380 
v L "stream" 1 336 "int8" `381 
v L "bits" 1 336 "int8" `385 
f G "spi_xfer_in" 1 336 "int16(int8 stream,int8 bits)" `383 
v L "stream" 1 337 "int8" `381 
v L "bits" 1 337 "int8" `388 
f G "spi_xfer_in" 1 337 "int32(int8 stream,int8 bits)" `386  "#use rtos() Prototypes:"
f B "rtos_run" 1 340 "void()" `389 
f B "rtos_yield" 1 341 "void()" `390 
v L "task" 1 342 "int8" `392 
f B "rtos_enable" 1 342 "void(int8 task)" `391 
v L "task" 1 343 "int8" `394 
f B "rtos_disable" 1 343 "void(int8 task)" `393 
f B "rtos_terminate" 1 344 "void()" `395 
v L "flag" 1 345 "int8" `397 
f B "rtos_await" 1 345 "void(int8 flag)" `396 
v L "sem" 1 346 "int8" `399 
f B "rtos_wait" 1 346 "void(int8 sem)" `398 
v L "sem" 1 347 "int8" `401 
f B "rtos_signal" 1 347 "void(int8 sem)" `400 
v L "task" 1 348 "int8" `403 
v L "msg" 1 348 "int8" `404 
f B "rtos_msg_send" 1 348 "void(int8 task,int8 msg)" `402 
f B "rtos_msg_read" 1 349 "int8()" `405 
f B "rtos_msg_poll" 1 350 "int8()" `406 
v L "task" 1 351 "int8" `408 
f B "rtos_overrun" 1 351 "int8(int8 task)" `407 
v L "task" 1 352 "int8" `410 
v L "stat" 1 352 "*int8" `411 
f B "rtos_stats" 1 352 "void(int8 task,*int8 stat)" `409  "#use timer() Prototypes:"
f B "get_ticks" 1 355 "int8()" `412 
f G "get_ticks" 1 356 "int16()" `413 
f G "get_ticks" 1 357 "int32()" `414 
v L "stream" 1 358 "int8" `416 
f G "get_ticks" 1 358 "int8(int8 stream)" `415 
v L "stream" 1 359 "int8" `418 
f G "get_ticks" 1 359 "int16(int8 stream)" `417 
v L "stream" 1 360 "int8" `420 
f G "get_ticks" 1 360 "int32(int8 stream)" `419 
v L "value" 1 361 "int8" `422 
f B "set_ticks" 1 361 "void(int8 value)" `421 
v L "value" 1 362 "int16" `424 
f G "set_ticks" 1 362 "void(int16 value)" `423 
v L "value" 1 363 "int32" `426 
f G "set_ticks" 1 363 "void(int32 value)" `425 
v L "stream" 1 364 "int8" `428 
v L "value" 1 364 "int8" `429 
f G "set_ticks" 1 364 "void(int8 stream,int8 value)" `427 
v L "stream" 1 365 "int8" `428 
v L "value" 1 365 "int16" `432 
f G "set_ticks" 1 365 "void(int8 stream,int16 value)" `430 
v L "stream" 1 366 "int8" `428 
v L "value" 1 366 "int32" `435 
f G "set_ticks" 1 366 "void(int8 stream,int32 value)" `433  "#use pwm() Prototypes:"
f B "pwm_on" 1 369 "void()" `436 
v L "stream" 1 370 "int8" `438 
f G "pwm_on" 1 370 "void(int8 stream)" `437 
f B "pwm_off" 1 371 "void()" `439 
v L "stream" 1 372 "int8" `441 
f G "pwm_off" 1 372 "void(int8 stream)" `440 
v L "duty" 1 373 "int16" `443 
f B "pwm_set_duty" 1 373 "void(int16 duty)" `442 
v L "stream" 1 374 "int8" `445 
v L "duty" 1 374 "int16" `446 
f G "pwm_set_duty" 1 374 "void(int8 stream,int16 duty)" `444 
v L "percent" 1 375 "int16" `448 
f B "pwm_set_duty_percent" 1 375 "void(int16 percent)" `447 
v L "stream" 1 376 "int8" `450 
v L "percent" 1 376 "int16" `451 
f G "pwm_set_duty_percent" 1 376 "void(int8 stream,int16 percent)" `449 
v L "frequency" 1 377 "int32" `453 
f B "pwm_set_frequency" 1 377 "void(int32 frequency)" `452 
v L "stream" 1 378 "int8" `455 
v L "frequency" 1 378 "int32" `456 
f G "pwm_set_frequency" 1 378 "void(int8 stream,int32 frequency)" `454  "#use capture() Prototypes:"
f B "get_capture_time" 1 381 "int16()" `457 
v L "stream" 1 382 "int8" `459 
f G "get_capture_time" 1 382 "int16(int8 stream)" `458 
f B "get_capture_event" 1 383 "int8()" `460 
v L "stream" 1 384 "int8" `462 
f G "get_capture_event" 1 384 "int8(int8 stream)" `461  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 397 "int16" `464 
f B "goto_address" 1 397 "void(int16 address)" `463 
v L "label" 1 398 "int16" `466 
f B "label_address" 1 398 "int16(int16 label)" `465 
F G "main" 0 7 "void()" `472 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "input_b" 0 0
F B "set_tris_b" 1 0
F B "get_tris_b" 0 0
F B "input_change_b" 0 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
