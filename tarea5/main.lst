CCS PCM C Compiler, Version 5.005d, 1               28-jun-13 12:45
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\p2\Desktop\kareem\tarea5\main.lst

               ROM used:   398 words (5%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           27 (7%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   137
0003:  NOP
.................... #include <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,00
000D:  DATA 2A,15
000E:  DATA 2A,15
000F:  DATA 2A,15
0010:  DATA 2A,15
0011:  DATA 2A,15
0012:  DATA 2A,15
0013:  DATA 2A,15
0014:  DATA 2A,15
0015:  DATA 00,00
*
00EC:  MOVF   0B,W
00ED:  MOVWF  28
00EE:  BCF    0B.7
00EF:  BSF    03.5
00F0:  BSF    03.6
00F1:  BSF    0C.7
00F2:  BSF    0C.0
00F3:  NOP
00F4:  NOP
00F5:  BCF    03.5
00F6:  MOVF   0C,W
00F7:  ANDLW  7F
00F8:  BTFSC  03.2
00F9:  GOTO   133
00FA:  BCF    03.6
00FB:  MOVWF  29
00FC:  BSF    03.6
00FD:  MOVF   0D,W
00FE:  BCF    03.6
00FF:  MOVWF  2A
0100:  BSF    03.6
0101:  MOVF   0F,W
0102:  BCF    03.6
0103:  MOVWF  2B
0104:  MOVF   29,W
0105:  MOVWF  2C
0106:  CALL   0C0
0107:  MOVF   2A,W
0108:  BSF    03.6
0109:  MOVWF  0D
010A:  BCF    03.6
010B:  MOVF   2B,W
010C:  BSF    03.6
010D:  MOVWF  0F
010E:  BSF    03.5
010F:  BSF    0C.7
0110:  BSF    0C.0
0111:  NOP
0112:  NOP
0113:  BCF    03.5
0114:  RLF    0C,W
0115:  RLF    0E,W
0116:  ANDLW  7F
0117:  BTFSC  03.2
0118:  GOTO   133
0119:  BCF    03.6
011A:  MOVWF  29
011B:  BSF    03.6
011C:  MOVF   0D,W
011D:  BCF    03.6
011E:  MOVWF  2A
011F:  BSF    03.6
0120:  MOVF   0F,W
0121:  BCF    03.6
0122:  MOVWF  2B
0123:  MOVF   29,W
0124:  MOVWF  2C
0125:  CALL   0C0
0126:  MOVF   2A,W
0127:  BSF    03.6
0128:  MOVWF  0D
0129:  BCF    03.6
012A:  MOVF   2B,W
012B:  BSF    03.6
012C:  MOVWF  0F
012D:  INCF   0D,F
012E:  BTFSC  03.2
012F:  INCF   0F,F
0130:  BCF    03.6
0131:  GOTO   0EF
0132:  BSF    03.6
0133:  BCF    03.6
0134:  BTFSC  28.7
0135:  BSF    0B.7
0136:  RETURN
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO 
.................... #use delay(clock=8000000) 
*
0016:  MOVLW  2D
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   029
001C:  MOVLW  02
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  97
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 00,F
0028:  GOTO   01C
0029:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0043:  MOVLW  0F
0044:  BSF    03.5
0045:  ANDWF  08,W
0046:  IORLW  F0
0047:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0048:  BCF    03.5
0049:  BSF    08.2
....................    delay_cycles(1); 
004A:  NOP
....................    lcd_output_enable(1); 
004B:  BSF    08.0
....................    delay_cycles(1); 
004C:  NOP
....................    high = lcd_read_nibble(); 
004D:  CALL   037
004E:  MOVF   78,W
004F:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
0050:  BCF    08.0
....................    delay_cycles(1); 
0051:  NOP
....................    lcd_output_enable(1); 
0052:  BSF    08.0
....................    delay_us(1); 
0053:  GOTO   054
....................    low = lcd_read_nibble(); 
0054:  CALL   037
0055:  MOVF   78,W
0056:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0057:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0058:  MOVLW  0F
0059:  BSF    03.5
005A:  ANDWF  08,W
005B:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005C:  BCF    03.5
005D:  SWAPF  34,W
005E:  MOVWF  77
005F:  MOVLW  F0
0060:  ANDWF  77,F
0061:  MOVF   77,W
0062:  IORWF  33,W
0063:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0037:  MOVF   08,W
0038:  MOVWF  77
0039:  SWAPF  08,W
003A:  ANDLW  0F
003B:  MOVWF  78
....................   #endif 
003C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002A:  SWAPF  34,W
002B:  ANDLW  F0
002C:  MOVWF  77
002D:  MOVLW  0F
002E:  ANDWF  08,W
002F:  IORWF  77,W
0030:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0031:  NOP
....................    lcd_output_enable(1); 
0032:  BSF    08.0
....................    delay_us(2); 
0033:  GOTO   034
0034:  GOTO   035
....................    lcd_output_enable(0); 
0035:  BCF    08.0
0036:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003D:  BSF    03.5
003E:  BCF    08.0
....................    lcd_rs_tris(); 
003F:  BCF    08.1
....................    lcd_rw_tris(); 
0040:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0041:  BCF    03.5
0042:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0064:  MOVF   78,W
0065:  MOVWF  33
0066:  BTFSC  33.7
0067:  GOTO   043
....................    lcd_output_rs(address); 
0068:  BTFSS  31.0
0069:  BCF    08.1
006A:  BTFSC  31.0
006B:  BSF    08.1
....................    delay_cycles(1); 
006C:  NOP
....................    lcd_output_rw(0); 
006D:  BCF    08.2
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(0); 
006F:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0070:  SWAPF  32,W
0071:  MOVWF  33
0072:  MOVLW  0F
0073:  ANDWF  33,F
0074:  MOVF   33,W
0075:  MOVWF  34
0076:  CALL   02A
....................    lcd_send_nibble(n & 0xf); 
0077:  MOVF   32,W
0078:  ANDLW  0F
0079:  MOVWF  33
007A:  MOVWF  34
007B:  CALL   02A
007C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007D:  MOVLW  0F
007E:  BSF    03.5
007F:  ANDWF  08,W
0080:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0081:  BCF    08.0
....................    lcd_rs_tris(); 
0082:  BCF    08.1
....................    lcd_rw_tris(); 
0083:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0084:  BCF    03.5
0085:  BCF    08.1
....................    lcd_output_rw(0); 
0086:  BCF    08.2
....................    lcd_output_enable(0); 
0087:  BCF    08.0
....................      
....................    delay_ms(15); 
0088:  MOVLW  0F
0089:  MOVWF  2D
008A:  CALL   016
....................    for(i=1;i<=3;++i) 
008B:  MOVLW  01
008C:  MOVWF  28
008D:  MOVF   28,W
008E:  SUBLW  03
008F:  BTFSS  03.0
0090:  GOTO   099
....................    { 
....................        lcd_send_nibble(3); 
0091:  MOVLW  03
0092:  MOVWF  34
0093:  CALL   02A
....................        delay_ms(5); 
0094:  MOVLW  05
0095:  MOVWF  2D
0096:  CALL   016
0097:  INCF   28,F
0098:  GOTO   08D
....................    } 
....................     
....................    lcd_send_nibble(2); 
0099:  MOVLW  02
009A:  MOVWF  34
009B:  CALL   02A
....................    delay_ms(5); 
009C:  MOVLW  05
009D:  MOVWF  2D
009E:  CALL   016
....................    for(i=0;i<=3;++i) 
009F:  CLRF   28
00A0:  MOVF   28,W
00A1:  SUBLW  03
00A2:  BTFSS  03.0
00A3:  GOTO   0AD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A4:  MOVF   28,W
00A5:  CALL   004
00A6:  MOVWF  29
00A7:  CLRF   31
00A8:  MOVF   29,W
00A9:  MOVWF  32
00AA:  CALL   03D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AB:  INCF   28,F
00AC:  GOTO   0A0
00AD:  RETURN
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00AE:  DECFSZ 2E,W
00AF:  GOTO   0B1
00B0:  GOTO   0B4
....................       address=LCD_LINE_TWO; 
00B1:  MOVLW  40
00B2:  MOVWF  2F
00B3:  GOTO   0B5
....................    else 
....................       address=0; 
00B4:  CLRF   2F
....................       
....................    address+=x-1; 
00B5:  MOVLW  01
00B6:  SUBWF  2D,W
00B7:  ADDWF  2F,F
....................    lcd_send_byte(0,0x80|address); 
00B8:  MOVF   2F,W
00B9:  IORLW  80
00BA:  MOVWF  30
00BB:  CLRF   31
00BC:  MOVF   30,W
00BD:  MOVWF  32
00BE:  CALL   03D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BF:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C0:  MOVF   2C,W
00C1:  XORLW  07
00C2:  BTFSC  03.2
00C3:  GOTO   0CE
00C4:  XORLW  0B
00C5:  BTFSC  03.2
00C6:  GOTO   0D3
00C7:  XORLW  06
00C8:  BTFSC  03.2
00C9:  GOTO   0DB
00CA:  XORLW  02
00CB:  BTFSC  03.2
00CC:  GOTO   0E1
00CD:  GOTO   0E6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00CE:  MOVLW  01
00CF:  MOVWF  2D
00D0:  MOVWF  2E
00D1:  CALL   0AE
00D2:  GOTO   0EB
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D3:  CLRF   31
00D4:  MOVLW  01
00D5:  MOVWF  32
00D6:  CALL   03D
....................                      delay_ms(2); 
00D7:  MOVLW  02
00D8:  MOVWF  2D
00D9:  CALL   016
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DA:  GOTO   0EB
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DB:  MOVLW  01
00DC:  MOVWF  2D
00DD:  MOVLW  02
00DE:  MOVWF  2E
00DF:  CALL   0AE
00E0:  GOTO   0EB
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E1:  CLRF   31
00E2:  MOVLW  10
00E3:  MOVWF  32
00E4:  CALL   03D
00E5:  GOTO   0EB
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E6:  MOVLW  01
00E7:  MOVWF  31
00E8:  MOVF   2C,W
00E9:  MOVWF  32
00EA:  CALL   03D
....................      #endif 
....................    } 
00EB:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... int16 num; 
.................... int16 num2=1; 
.................... int16 sum;// este 16 en el int aumenta la capacidad de los bit de 8 a 16 
.................... int16 valorAnalogo; 
.................... void main() 
*
0137:  MOVLW  71
0138:  BSF    03.5
0139:  MOVWF  0F
013A:  MOVF   0F,W
013B:  BCF    03.5
013C:  CLRF   23
013D:  MOVLW  01
013E:  MOVWF  22
013F:  BSF    03.5
0140:  BSF    03.6
0141:  MOVF   09,W
0142:  ANDLW  C0
0143:  MOVWF  09
0144:  BCF    03.6
0145:  BCF    1F.4
0146:  BCF    1F.5
0147:  MOVLW  00
0148:  BSF    03.6
0149:  MOVWF  08
014A:  BCF    03.5
014B:  CLRF   07
014C:  CLRF   08
014D:  CLRF   09
014E:  BCF    03.7
014F:  MOVLW  1F
0150:  ANDWF  03,F
....................  
....................  
....................    { 
....................       lcd_init(); 
0151:  BCF    03.6
0152:  CALL   07D
....................       set_tris_e(0xFF); 
0153:  BSF    03.5
0154:  BSF    09.0
0155:  BSF    09.1
0156:  BSF    09.2
0157:  BSF    09.3
....................       SETUP_ADC_PORTS (sAN5); 
0158:  BSF    03.6
0159:  MOVF   09,W
015A:  ANDLW  C0
015B:  MOVWF  09
015C:  BCF    03.6
015D:  BCF    1F.4
015E:  BCF    1F.5
015F:  MOVLW  20
0160:  BSF    03.6
0161:  MOVWF  08
....................       SET_ADC_CHANNEL(5); 
0162:  MOVLW  14
0163:  MOVWF  78
0164:  BCF    03.5
0165:  BCF    03.6
0166:  MOVF   1F,W
0167:  ANDLW  C3
0168:  IORWF  78,W
0169:  MOVWF  1F
....................       setup_adc(ADC_CLOCK_DIV_32); 
016A:  BCF    1F.6
016B:  BSF    1F.7
016C:  BSF    03.5
016D:  BCF    1F.7
016E:  BCF    03.5
016F:  BSF    1F.0
....................       lcd_init(); 
0170:  CALL   07D
....................        
....................        
....................       while (1) 
....................      { 
....................                    
....................         valorAnalogo = read_adc(); 
0171:  BSF    1F.1
0172:  BTFSC  1F.1
0173:  GOTO   172
0174:  CLRF   27
0175:  MOVF   1E,W
0176:  MOVWF  26
....................         lcd_putc("\f");//limpiar la pantalla 
0177:  MOVLW  0C
0178:  BSF    03.6
0179:  MOVWF  0D
017A:  MOVLW  00
017B:  MOVWF  0F
017C:  BCF    03.6
017D:  CALL   0EC
....................         printf(lcd_putc,"****************"); 
017E:  MOVLW  0D
017F:  BSF    03.6
0180:  MOVWF  0D
0181:  MOVLW  00
0182:  MOVWF  0F
0183:  BCF    03.6
0184:  CALL   0EC
....................    
....................         delay_ms(1000); 
0185:  MOVLW  04
0186:  MOVWF  28
0187:  MOVLW  FA
0188:  MOVWF  2D
0189:  CALL   016
018A:  DECFSZ 28,F
018B:  GOTO   187
018C:  GOTO   171
....................              
....................          } 
....................    } 
018D:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
